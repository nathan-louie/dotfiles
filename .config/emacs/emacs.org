#+TITLE: Emacs Literate Configuration
#+AUTHOR: Nathan Louie
#+STARTUP: content indent hidestars

** Why Emacs?

Emacs has been around longer than I've been alive. It's not a stretch to say that Emacs will be continue to be around for my whole career.
- Each package has its own niche:
  - Not unlike the Vim/Neovim ecosystem, where there are a handful of plugins that claim to have the same purpose. At that point, how do you choose between them? I like the clear direction of the Emacs package ecosystem.
- The direction for Emacs as a whole is stable, albeit slow at times:
  - It feels okay to stay, say on Emacs 29.X, for a long time without *having* to switch to the bleeding-edge version.
- I can have the exact experience I want, in the way that I want it:
  - Personal customization on Emacs is endless. On top of that, using ELisp is fun and will /hopefully/ get me to use more Lispy languages in the future.

** Why use a literate configuration?

Documentation is a gift to your future self when you come back a month or years from now and wonder what the hell you wrote: this configuration is no different. The benefits of writing documentation heavily outweighs, in my opinion, the cost of having to re-read and search for why a certain configuration was set that way by your past self.

To modify this setup, edit this Org file and evaluate the code block changed with =C-c C-c= or tangle the whole file with =C-c C-v C-t=.

#+begin_src emacs-lisp :tangle no :results none
(org-babel-tangle)
#+end_src
* Emacs build
:PROPERTIES:
:CUSTOM_ID: emacs_build
:END:

I use [[https://bitbucket.org/mituharu/emacs-mac/overview][emacs-mac]] on OSX. Specifically, I use the following to build emacs-mac:

#+begin_src bash :tangle no :results none
  brew install emacs-mac --with-native-comp --with-starter --with-mac-metal --with-imagemagick --with-librsvg --with-emacs-big-sur-icon
#+end_src

** Why emacs-mac over emacs-plus?
- It feels more native to OSX
- Frames are properly behaved with window managers
- Native PDF and stipple display
- Less of a headache using native compilation (although this may have changed since I last tried emacs-plus)
- I have no need for emacsclient

* =early-init.el=
:PROPERTIES:
:CUSTOM_ID: early-init
:END:

The [[file:early-init.el][file]] that contains customizations that need to take effect during Emacs startup earlier than the normal =init.el= file. Customizations related to GUI features will not work reliably in =early-init.el=, but if needed use hooks to do so.

Here, we disable =site-start= and =default= files for faster startup.

#+begin_src emacs-lisp :tangle "early-init.el"
  (setq site-run-file nil)
  (setq inhibit-default-init t)
#+end_src

Maximizing the garbage collection threshold during startup makes Emacs boot faster.

#+begin_src emacs-lisp :tangle "early-init.el"
  (setq gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 0.5)
#+end_src

See Elpaca setup.

#+begin_src emacs-lisp :tangle "early-init.el"
  (setq package-enable-at-startup nil)
#+end_src

After the init process is done, we reset the garbage collecter limit.

#+begin_src emacs-lisp :tangle "early-init.el"
  (add-hook 'after-init-hook
            #'(lambda () (setq gc-cons-threshold (* 8 1024 1024)
                               gc-cons-percentage 0.1)))
#+end_src
